{"version":3,"sources":["components/List/List.module.css","components/Button/Button.jsx","components/InputText/InputText.jsx","components/List/List.jsx","components/TodoList/TodoList.jsx","pages/Todo.jsx","App.js","index.js"],"names":["module","exports","Button","props","onClick","OnButtonClick","buttonText","InputText","type","size","style","height","onChange","onChangeHandler","value","onKeyUp","onKeyInput","List","listLength","listItem","length","listValue","map","listitems","Index","isEdit","isEditItem","event","editedText","target","editItemsHandler","submitHandler","onItemCancel","className","isDone","styles","isDoneItem","item","color","editHandler","swapListItemHandler","doneHandler","deleteHandler","id","TodoList","useState","InputTextValue","setInputTextValue","setlistItem","useEffect","localToDo","localStorage","getItem","todo","JSON","parse","setItem","stringify","addTask","trim","lists","push","textAlign","TextValue","which","listIndex","splice","initialIndex","finalIndex","temp","Todo","backgroundColor","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.39e8166f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"isDoneItem\":\"List_isDoneItem__1GJX3\",\"checked\":\"List_checked__1Ezhy\"};","\r\nimport  \"./Button.module.css\"\r\n\r\nconst Button = (props) => {\r\n    return(\r\n        <>\r\n        <button  onClick={props.OnButtonClick }> {props.buttonText}</button>\r\n        </>\r\n    );\r\n};\r\nexport default Button;","import \"./Input.module.css\"\r\nconst InputText = (props) => {\r\n    return(\r\n       <input type=\"text\" size=\"50\" style={{height:\"30px\"}}\r\n       onChange={props.onChangeHandler}\r\n       value= {props.value}\r\n       onKeyUp={props.onKeyInput}\r\n       /> \r\n    );\r\n};\r\nexport default InputText;","import Button from \"../Button/Button\";\r\nimport InputText from \"../InputText/InputText\";\r\nimport styles from  \"./List.module.css\"\r\nimport {GrEdit} from \"react-icons/gr\"\r\nimport {CgArrowUpR,CgArrowDownR}  from \"react-icons/cg\"\r\nimport{AiFillDelete} from \"react-icons/ai\"\r\nimport {FaThumbsUp} from \"react-icons/fa\"\r\n\r\n\r\nconst List = (props) =>{\r\n    const listLength = props.listItem.length-1\r\n    const listValue= props.listItem.map((listitems,Index)=>\r\n     (<li key={Index}>\r\n         {listitems.isEdit && (\r\n             <>\r\n             <InputText\r\n             value = {listitems.isEditItem}\r\n             onChangeHandler={(event)=>{\r\n                const editedText = event.target.value;\r\n                props.editItemsHandler(Index,editedText)}}\r\n             />\r\n             <Button\r\n             buttonText=\"SUBMIT\"\r\n             OnButtonClick={()=>{props.submitHandler(Index)}}\r\n             />\r\n             <Button\r\n             buttonText=\"CANCEL\"\r\n             OnButtonClick={()=>{props.onItemCancel(Index)}}\r\n             />\r\n\r\n             </>\r\n         )}\r\n\r\n         {!listitems.isEdit  && (\r\n\r\n                    <>\r\n                    {/* Conditional styling for done lists  */}\r\n                    <span className={listitems.isDone ? styles.isDoneItem:\"\"}>\r\n                        {listitems.item} \r\n                    </span>\r\n                    {!listitems.isDone && (\r\n                    <Button\r\n                    buttonText={<GrEdit size=\"25\" color=\"yellow\"/>}\r\n                    OnButtonClick={()=>{props.editHandler(Index)}}\r\n                    />)}\r\n\r\n                    {/* Conditional rendering - Up Button for first element */} \r\n                    { Index !==0 && \r\n                        (<Button\r\n                            buttonText={<CgArrowUpR size=\"25\" color=\"blue\"/>}\r\n                            OnButtonClick={()=>{props.swapListItemHandler(Index,Index-1)}}\r\n                    />)}\r\n                    {/* Conditional rendering - Down Button for last element */}\r\n                    { Index !==listLength && \r\n                    (<Button\r\n                            buttonText={<CgArrowDownR size=\"25\" color=\"violet\"/>}\r\n                            OnButtonClick={()=>{props.swapListItemHandler(Index,Index+1)}}\r\n                    />\r\n                    )}\r\n            \r\n                {/* Conditional rendering  */}\r\n\r\n                {!listitems.isDone && (\r\n                    <Button\r\n                        buttonText={<FaThumbsUp size=\"25\" color=\"green\"/>}\r\n                        OnButtonClick ={()=>{props.doneHandler(Index)}}\r\n                    />\r\n                )}\r\n                    {/* Conditional rendering  */}\r\n\r\n                {listitems.isDone && (\r\n                    <Button\r\n                        buttonText={<AiFillDelete size=\"25\" color=\"red\"/>}\r\n                        OnButtonClick ={()=>{props.deleteHandler(Index)}}\r\n                    />\r\n                )}\r\n             </>\r\n           \r\n)} \r\n        </li>)\r\n    )\r\n    return(\r\n        <ol id=\"myOl\">{listValue}</ol>  \r\n    );\r\n};\r\nexport default List;\r\n","import Button from \"../Button/Button\"\r\nimport InputText from \"../InputText/InputText\"\r\nimport List from \"../List/List\"\r\nimport React,{ useState ,useEffect} from \"react\";\r\nimport {SiAddthis} from \"react-icons/si\"\r\n\r\n\r\n\r\n\r\nconst TodoList = ()=>{\r\n\r\n    const [InputTextValue, setInputTextValue]= useState('');\r\n    const [listItem,setlistItem] = useState([])\r\n\r\n    useEffect(()=>{\r\n        const localToDo = localStorage.getItem(\"local\")\r\n        if(localToDo){\r\n            const todo = JSON.parse(localToDo);\r\n            setlistItem(todo)\r\n        }\r\n    },[])\r\n\r\n\r\n    useEffect(()=>{\r\n        localStorage.setItem(\"local\",JSON.stringify(listItem))\r\n    },[listItem]);\r\n\r\n   const addTask=  ()=>{\r\n        if(InputTextValue.trim()){\r\n                 const lists= [...listItem];                     \r\n                 const listitems = {\r\n                     item:InputTextValue,\r\n                    isEditItem:InputTextValue,\r\n                    isDone:false,\r\n                    isEdit:false,\r\n                }\r\n                lists.push(listitems);\r\n                setInputTextValue('')\r\n                setlistItem(lists)\r\n        }\r\n        else{\r\n            setInputTextValue('')\r\n        }\r\n    \r\n    };\r\n\r\n    const inputText=(event)=>{\r\n        const TextValue= event.target.value;\r\n        setInputTextValue(TextValue)\r\n\r\n    };\r\n\r\n    const buttonClickHandler = (event)=>{\r\n                if(event.which ===13){\r\n                    addTask();\r\n                }\r\n    };\r\n   \r\n    const isDoneHandler = (listIndex)=>{\r\n            const lists= [...listItem]; \r\n            lists[listIndex].isDone=true;\r\n            setlistItem(lists)  \r\n    \r\n    };\r\n\r\n    const isDeleteHandler =(listIndex)=>{\r\n        const lists= [...listItem];\r\n        lists.splice(listIndex,1);\r\n        setlistItem(lists) \r\n    };\r\n\r\n    const swapListItem = (initialIndex,finalIndex)=>{\r\n        const lists= [...listItem];\r\n        const temp= lists[initialIndex];\r\n         lists[initialIndex] =lists[finalIndex];\r\n         lists[finalIndex] = temp;\r\n         setlistItem(lists);\r\n    };\r\n    \r\n    const isEditItemHandler= (listIndex)=>{\r\n        const lists= [...listItem];\r\n        lists[listIndex].isEdit=true;\r\n        setlistItem(lists);  \r\n    };\r\n\r\n    const isSubmitItemHandler =(listIndex)=>{\r\n        const lists= [...listItem];\r\n        lists[listIndex].item= lists[listIndex].isEditItem;\r\n        lists[listIndex].isEdit=false;\r\n        setlistItem(lists);   \r\n    };\r\n\r\n    const onEditItemHandler=(listIndex,editedText)=>{\r\n        const lists= [...listItem];\r\n        lists[listIndex].isEditItem=editedText;\r\n        setlistItem(lists);   \r\n    };\r\n\r\n  const onItemCancelHandler=(listIndex)=>{\r\n    const lists= [...listItem];\r\n    lists[listIndex].isEditItem= lists[listIndex].item;\r\n    lists[listIndex].isEdit=false;\r\n    setlistItem(lists); \r\n    };\r\n\r\n    return(\r\n        \r\n        <>\r\n        <div style={{textAlign:\"center\"}}>\r\n            <InputText\r\n            onChangeHandler = {inputText}\r\n           \r\n            value= {InputTextValue}\r\n            onKeyInput={buttonClickHandler}\r\n            />\r\n            <Button\r\n            buttonText={<SiAddthis size=\"30\" color=\"purple\"/>}\r\n           OnButtonClick={addTask}\r\n            />\r\n            </div>\r\n            <List \r\n              listItem={listItem}\r\n              doneHandler={isDoneHandler}\r\n              deleteHandler={isDeleteHandler}\r\n              swapListItemHandler = {swapListItem}\r\n              editHandler={isEditItemHandler}\r\n              submitHandler={isSubmitItemHandler}\r\n              editItemsHandler={onEditItemHandler}\r\n              onItemCancel={onItemCancelHandler}\r\n\r\n            /> \r\n             \r\n\r\n        </>\r\n    );\r\n};\r\nexport default TodoList;","import TodoList from \"../components/TodoList/TodoList\"\r\n\r\nconst Todo = ()=>{\r\n    return( \r\n        <div >\r\n        <h1 style={{textAlign:\"center\",backgroundColor:\"red\"}}>ROSHAN TODO</h1>\r\n        <TodoList/>\r\n        </div>\r\n    );\r\n};\r\nexport default Todo;","import Todo from \"./pages/Todo\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"center\">\n      <Todo />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}